{"version":3,"sources":["context/TodoContext.js","components/TodoHead.js","components/TodoItem.js","components/TodoList.js","components/TodoTemplate.js","components/TodoCreate.js","context/TodoListReducer.js","App.js","index.js"],"names":["initialTodoList","TodoListContext","createContext","TodoHeadBlock","styled","div","CircleButton","button","TodoHead","today","Date","dateString","toLocaleDateString","year","month","day","dayName","weekday","useContext","data","dispatch","nextId","undoneTodos","filter","item","done","className","length","onClick","type","current","Remove","TodoItemBlock","CheckCircle","props","css","Text","TodoItem","id","text","e","payload","TodoListBlock","TodoList","map","TodoTemplateBlock","TodoTemplate","children","open","boxUp","keyframes","boxDown","InsertFormPositioner","InsertForm","form","Input","input","TodoCreate","useState","setOpen","setText","inputRef","useRef","onTransitionEnd","focus","placeholder","onKeyPress","event","key","preventDefault","value","onChange","target","tabIndex","ref","initialState","saveItems","newItems","localStorage","setItem","JSON","stringify","reducer","state","action","nextState","concat","GlobalStyle","createGlobalStyle","App","defaultData","parse","getItem","useReducer","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c624ea5.chunk.js","sourcesContent":["import { createContext } from \"react\"\r\n\r\n// 초기 데이터\r\n// 상위 provider가 없는데 하위 컴포넌트가 이걸 읽으려고 할 때 \r\n// 앱 크래시를 막는 방어 데이터\r\nconst initialTodoList = []\r\n\r\n// 초기값이 []인 컨텍스트 생성\r\nconst TodoListContext = createContext(initialTodoList)\r\n\r\nexport default TodoListContext","import { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport TodoListContext from \"../context/TodoContext\";\r\nimport { MdAdd } from \"react-icons/md\";\r\n\r\nconst TodoHeadBlock = styled.div`\r\n  padding-top: 48px;\r\n  padding-left: 32px;\r\n  padding-right: 32px;\r\n  padding-bottom: 24px;\r\n\r\n  border-bottom: 1px solid #e9ecef;\r\n\r\n  h1 {\r\n    margin: 0;\r\n    font-size: 36px;\r\n    color: #343a40;\r\n  }\r\n\r\n  .day {\r\n    margin-top: 4px;\r\n    color: #868e96;\r\n    font-size: 21px;\r\n  }\r\n\r\n  .task-left {\r\n    color: #7c83fd;\r\n    font-size: 18px;\r\n    \r\n    font-weight: bold;\r\n  }\r\n\r\n  .task {\r\n    display: flex;\r\n    margin-top: 40px;\r\n    justify-content: space-between;\r\n  }\r\n`;\r\n\r\nconst CircleButton = styled.button`\r\n\r\ntransform: rotate(45deg);\r\nbackground: #ff6b6b;\r\nwidth: 30px;\r\nheight: 30px;\r\nborder-radius: 50%;\r\n\r\ndisplay: flex;\r\nalign-items: center;\r\njustify-content: center;\r\nfont-size: 50px;\r\n\r\ncursor: pointer;\r\nborder: none;\r\n`\r\n\r\n\r\nfunction TodoHead() {\r\n  const today = new Date();\r\n  const dateString = today.toLocaleDateString(\"ko-KR\", {\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\"\r\n  })\r\n  const dayName = today.toLocaleDateString(\"ko-KR\", { weekday: \"long\" })\r\n\r\n  const { data, dispatch, nextId } = useContext(TodoListContext)\r\n  const undoneTodos = data.filter((item) => item.done === false)\r\n\r\n  const onResetStorage = () => {\r\n    dispatch({ type: \"CLEAR\" })\r\n    nextId.current = 1\r\n  }\r\n\r\n\r\n  return (\r\n    <TodoHeadBlock>\r\n      <h1>{dateString}</h1>\r\n      <div className=\"day\">{dayName}</div>\r\n      <div className=\"task\">\r\n        <div className=\"task-left\">{undoneTodos.length}개 남음</div>\r\n        <CircleButton onClick={onResetStorage} > <MdAdd /></CircleButton>\r\n      </div>\r\n    </TodoHeadBlock>\r\n  );\r\n}\r\n\r\nexport default TodoHead;\r\n","import styled, { css } from \"styled-components\";\r\nimport { MdDone, MdDelete } from \"react-icons/md\";\r\nimport { useContext } from \"react\";\r\nimport TodoListContext from \"../context/TodoContext\";\r\n\r\nconst Remove = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #8ca1a5;\r\n  font-size: 24px;\r\n  cursor: pointer;\r\n  &:hover {\r\n    color: #ff6b6b;\r\n  }\r\n  display: none;\r\n`;\r\n\r\nconst TodoItemBlock = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding-top: 12px;\r\n  padding-bottom: 12px;\r\n\r\n  &:hover {\r\n    ${Remove} {\r\n      display: initial;\r\n    }\r\n  }\r\n`;\r\n\r\nconst CheckCircle = styled.div`\r\n  width: 32px;\r\n  height: 32px;\r\n  border-radius: 16px;\r\n  border: 1px solid #787a91;\r\n  font-size: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-right: 20px;\r\n  cursor: pointer;\r\n\r\n  ${(props) =>\r\n    props.done &&\r\n    css`\r\n      border: 1px solid #297f87;\r\n      color: #297f87;\r\n    `}\r\n`;\r\n\r\nconst Text = styled.div`\r\n  flex: 1;\r\n  font-size: 21px;\r\n  color: #495057;\r\n  ${(props) =>\r\n    props.done &&\r\n    css`\r\n      color: #787a91;\r\n      text-decoration: line-through;\r\n    `}\r\n`;\r\nconst TodoItem = ({ id, done, text }) => {\r\n  const { dispatch } = useContext(TodoListContext);\r\n\r\n  const onRemoveClick = (e) => {\r\n    dispatch({ type: \"DELETE\", payload: { id } });\r\n  };\r\n  const onCircleClick = (e) => {\r\n    dispatch({ type: \"DONE\", payload: { id } });\r\n  };\r\n  return (\r\n    <TodoItemBlock>\r\n      <CheckCircle done={done} onClick={onCircleClick}>\r\n        {done && <MdDone />}\r\n      </CheckCircle>\r\n      <Text done={done}>{text}</Text>\r\n      <Remove onClick={onRemoveClick}>\r\n        <MdDelete />\r\n      </Remove>\r\n    </TodoItemBlock>\r\n  );\r\n};\r\n\r\nexport default TodoItem;\r\n","import { useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport TodoListContext from \"../context/TodoContext\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nconst TodoListBlock = styled.div`\r\n  flex: 1;\r\n  padding: 20px 32px;\r\n  padding-bottom: 48px;\r\n  overflow-y: auto;\r\n  background: #b5deff;\r\n  border-bottom-left-radius: 15px;\r\n  border-bottom-right-radius: 15px;\r\n\r\n  &::-webkit-scrollbar {\r\n    width: 15px;\r\n    background-color: darkgrey;\r\n    border-bottom-right-radius: 10px;\r\n  }\r\n  &::-webkit-scrollbar-thumb {\r\n    background-color: #7c83fd;\r\n    border: 3px solid transparent;\r\n    background-clip: content-box;\r\n    border-bottom-right-radius: 10px;\r\n  }\r\n`;\r\n\r\n// context를 사용하는 consumer\r\n// useContext로 context를 지정해두면 이 앱 밖에서 provider를 찾음\r\nconst TodoList = () => {\r\n  const { data } = useContext(TodoListContext);\r\n  return (\r\n    <TodoListBlock>\r\n      {data.map((item) => {\r\n        return (\r\n          <TodoItem\r\n            text={item.text}\r\n            done={item.done}\r\n            id={item.id}\r\n            key={item.id}\r\n          ></TodoItem>\r\n        );\r\n      })}\r\n    </TodoListBlock>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import styled from \"styled-components\";\r\n\r\nconst TodoTemplateBlock = styled.div`\r\n  width: 512px;\r\n  height: 768px;\r\n\r\n  position: relative;\r\n  background: white;\r\n  border-radius: 16px;\r\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.1);\r\n\r\n  margin: 0 auto;\r\n\r\n  margin-top: 96px;\r\n  margin-bottom: 32px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const TodoTemplate = ({ children }) => {\r\n  return <TodoTemplateBlock>{children}</TodoTemplateBlock>;\r\n};\r\n","import { useContext, useRef, useState } from \"react\";\r\nimport styled, { css, keyframes } from \"styled-components\";\r\nimport { MdAdd } from \"react-icons/md\";\r\nimport TodoListContext from \"../context/TodoContext\";\r\n\r\nconst CircleButton = styled.button`\r\n  background: #38d9a9;\r\n  &:hover {\r\n    background: #63e6be;\r\n  }\r\n  &:active {\r\n    background: #63e6be;\r\n  }\r\n  z-index: 5;\r\n  cursor: pointer;\r\n  width: 80px;\r\n  height: 80px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 60px;\r\n  position: absolute;\r\n  left: 50%;\r\n  bottom: 0px;\r\n  transform: translate(-50%, 50%);\r\n  color: white;\r\n  border-radius: 50%;\r\n  border: none;\r\n  outline: none;\r\n\r\n  transition: 0.125s all ease-in;\r\n  ${(props) =>\r\n    props.open &&\r\n    css`\r\n      background: #ff6b6b;\r\n      &:hover {\r\n        background: #ff8787;\r\n      }\r\n      &:active {\r\n        background: #fa5252;\r\n      }\r\n      transform: translate(-50%, 50%) rotate(45deg);\r\n    `}\r\n`;\r\n\r\nconst boxUp = keyframes`\r\n  from {\r\n    transform: translateY(20px);\r\n    opacity: 0;\r\n  }\r\n\r\n  to {\r\n    transform: translateY(0);\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nconst boxDown = keyframes`\r\n  from {\r\n    transform: translateY(0);\r\n    opacity: 1;\r\n  }\r\n\r\n  to {\r\n    transform: translateY(20px);\r\n    opacity: 0;\r\n  }\r\n`;\r\n\r\nconst InsertFormPositioner = styled.div`\r\n  width: 100%;\r\n  bottom: 0;\r\n  left: 0;\r\n  position: absolute;\r\n  visibility: ${(props) => (props.open ? \"visible\" : \"hidden\")};\r\n  animation: ${(props) => (props.open ? boxUp : boxDown)} 0.4s linear;\r\n  transition: visibility 0.4s ease-in;\r\n`;\r\n\r\nconst InsertForm = styled.form`\r\n  background: #f8f9fa;\r\n  padding-left: 32px;\r\n  padding-top: 32px;\r\n  padding-right: 32px;\r\n  padding-bottom: 72px;\r\n\r\n  border-bottom-left-radius: 15px;\r\n  border-bottom-right-radius: 10px;\r\n\r\n  border-top: 1px solid #e9ecef;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 12px;\r\n  border-radius: 4px;\r\n  border: 1px solid #dee2e6;\r\n  width: 100%;\r\n  outline: none;\r\n  font-size: 18px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nconst TodoCreate = () => {\r\n  const [open, setOpen] = useState(false);\r\n  const onToggle = () => {\r\n    setOpen(!open);\r\n  };\r\n  const [text, setText] = useState(\"\");\r\n  const { dispatch, nextId } = useContext(TodoListContext);\r\n\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      event.preventDefault();\r\n      dispatch({ type: \"ADD\", payload: { text: text, done: false, id: nextId.current } });\r\n\r\n      nextId.current++;\r\n      setOpen(false);\r\n      setText(\"\");\r\n    }\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setText(value);\r\n  };\r\n\r\n  const onTransitionEnd = () => {\r\n    inputRef.current && inputRef.current.focus();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <InsertFormPositioner open={open} onTransitionEnd={onTransitionEnd}>\r\n        <InsertForm>\r\n          <Input\r\n            placeholder=\"오늘은 뭐하지\"\r\n            onKeyPress={handleKeyPress}\r\n            value={text}\r\n            onChange={onChange}\r\n            tabIndex=\"0\"\r\n            ref={inputRef}\r\n          ></Input>\r\n        </InsertForm>\r\n      </InsertFormPositioner>\r\n\r\n      <CircleButton onClick={onToggle} open={open}>\r\n        <MdAdd />\r\n      </CircleButton>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoCreate;\r\n","// Reducer : 데이터를 안전하게 조작하기 위한 구조\r\n\r\n// initial state : 초기 상태\r\nexport const initialState = [];\r\n\r\nconst saveItems = (newItems) => {\r\n  localStorage.setItem(\"data\", JSON.stringify(newItems));\r\n}\r\n\r\n// state : 상태, 데이터\r\n// ex) 할 일 : { id: 1, text: \"놀기\", done: false },\r\n// action : 상태를 ~~게 바꿈\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"ADD\":\r\n      {\r\n        const nextState = state.concat(action.payload);\r\n        saveItems(nextState);\r\n        return nextState;\r\n      }\r\n    case \"DELETE\":\r\n      {\r\n        const nextState = state.filter((item) => item.id !== action.payload.id);\r\n        saveItems(nextState);\r\n        return nextState;\r\n      }\r\n    case \"DONE\":\r\n      {\r\n        const nextState = state.map((item) =>\r\n          item.id === action.payload.id ? { ...item, done: !item.done } : item\r\n        );\r\n        saveItems(nextState);\r\n        return nextState;\r\n      }\r\n    case \"CLEAR\":\r\n      {\r\n        const nextState = initialState\r\n        saveItems(nextState)\r\n        return nextState\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { createGlobalStyle } from \"styled-components\";\r\nimport \"./App.css\";\r\nimport TodoHead from \"./components/TodoHead\";\r\nimport TodoList from \"./components/TodoList\";\r\nimport { TodoTemplate } from \"./components/TodoTemplate\";\r\nimport TodoListContext from \"./context/TodoContext\";\r\nimport TodoCreate from \"./components/TodoCreate\";\r\nimport { useReducer, useRef } from \"react\";\r\nimport reducer, { initialState } from \"./context/TodoListReducer\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    background-color: #e9e9e9;\r\n  }\r\n`;\r\n\r\nfunction App() {\r\n  const defaultData =\r\n    JSON.parse(localStorage.getItem(\"data\")) || initialState;\r\n  const [data, dispatch] = useReducer(reducer, defaultData);\r\n  let nextId = useRef(data.length + 1);\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle></GlobalStyle>\r\n      <TodoTemplate>\r\n        <TodoListContext.Provider value={{ dispatch, data, nextId }}>\r\n          <TodoHead></TodoHead>\r\n          <TodoList></TodoList>\r\n          <TodoCreate></TodoCreate>\r\n        </TodoListContext.Provider>\r\n      </TodoTemplate>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}